 PROJECT(PlusApp)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)
IF(COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 NEW)
  CMAKE_POLICY(SET CMP0020 NEW)
ENDIF(COMMAND CMAKE_POLICY)

# ------------------------------------------------------------------------
# Find Plus use file
IF ( NOT PLUSLIB_DIR )
    FIND_PACKAGE (PlusLib)
ELSE ()
    FIND_PACKAGE (PlusLib REQUIRED PATHS "${PLUSLIB_DIR}/src" NO_DEFAULT_PATH)
ENDIF() 

IF ( PlusLib_FOUND)
  INCLUDE( ${PlusLib_USE_FILE} )
ELSE( PlusLib_FOUND )
    MESSAGE( FATAL_ERROR "This project requires PlusLib. One of these components is missing. Please verify configuration")
ENDIF( PlusLib_FOUND )

# ------------------------------------------------------------------------
# Set project version number: PlusApp version should identical to Plus version 
SET(PLUSAPP_VERSION_MAJOR ${PLUSLIB_VERSION_MAJOR})
SET(PLUSAPP_VERSION_MINOR ${PLUSLIB_VERSION_MINOR})
SET(PLUSAPP_VERSION_PATCH ${PLUSLIB_VERSION_PATCH})
SET(PLUSAPP_VERSION ${PLUSAPP_VERSION_MAJOR}.${PLUSAPP_VERSION_MINOR}.${PLUSAPP_VERSION_PATCH})
SET(PLUSAPP_REVISION ${PLUSLIB_REVISION})

SET(PLUSAPP_PACKAGE_EDITION "" CACHE STRING "Specifies a name that refers to the combination of hardware devices the created install package supports. The name is added to the package filename.") 

MESSAGE(STATUS "PlusApp version: ${PLUSAPP_VERSION}" )
     
# --------------------------------------------------------------------------
# Testing
#

# Standard CMake option for testing.
OPTION(BUILD_TESTING
       "Build test programs"
       ON)

INCLUDE(CTest)

# Setup file for setting custom ctest vars (for ignoring certain warnings, etc.)
CONFIGURE_FILE(
  CTestCustom.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake
  @ONLY
  )

# Documentation generator
STRING(TOUPPER ${CMAKE_MAKE_PROGRAM} MAKE_PROGRAM_UPPERCASE)
IF (${MAKE_PROGRAM_UPPERCASE} MATCHES "MSBUILD")
  SET(IS_MAKE_PROGRAM_MSBUILD TRUE)
ELSE()
  SET(IS_MAKE_PROGRAM_MSBUILD FALSE)
ENDIF()
CONFIGURE_FILE(
  CreateUserManual.bat.in
  ${CMAKE_CURRENT_BINARY_DIR}/CreateUserManual.bat
  )
  
# --------------------------------------------------------------------------
# Find SVN for revision information status and automatic update of the repository
#

IF (PLUSAPP_OFFLINE_BUILD)
  SET(PLUSAPP_REVISION 0)
ELSE(PLUSAPP_OFFLINE_BUILD)
  FIND_PACKAGE(Subversion)
  IF(Subversion_FOUND)
    Subversion_WC_INFO(${CMAKE_CURRENT_SOURCE_DIR} PLUSAPP_SVN_INFO)
    MESSAGE(STATUS "Current revision is ${PLUSAPP_SVN_INFO_WC_REVISION}") 
    SET(PLUSAPP_REVISION ${PLUSAPP_SVN_INFO_WC_REVISION})
  ENDIF(Subversion_FOUND) 
  SET( PLUSAPP_SVN_EXECUTABLE ${Subversion_SVN_EXECUTABLE} )
ENDIF(PLUSAPP_OFFLINE_BUILD)

# Standard CMake option for building libraries shared or static by default.
OPTION(BUILD_SHARED_LIBS
  "Build with shared libraries."
  ${VTK_BUILD_SHARED_LIBS}
  ${ITK_BUILD_SHARED_LIBS}
  )    

# --------------------------------------------------------------------------
# Configure output paths for libraries and executables.
#
SET(LIBRARY_OUTPUT_PATH  ${PLUS_EXECUTABLE_OUTPUT_PATH} CACHE PATH "Single output directory for building all libraries." FORCE)
SET(EXECUTABLE_OUTPUT_PATH ${PLUS_EXECUTABLE_OUTPUT_PATH} CACHE PATH "Single output directory for building all executables." FORCE)
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH )

IF ( ${CMAKE_GENERATOR} MATCHES "Visual Studio" )
  SET(TEST_EXECUTABLE_OUTPUT_PATH "${PLUS_EXECUTABLE_OUTPUT_PATH}/Release")
ELSE()
  SET(TEST_EXECUTABLE_OUTPUT_PATH "${PLUS_EXECUTABLE_OUTPUT_PATH}")
ENDIF()

SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/Install )
SET( INSTALL_DESTINATION_DIR "PlusApp_v${PLUSAPP_VERSION_MAJOR}.${PLUSAPP_VERSION_MINOR}.${PLUSAPP_VERSION_PATCH}" )

OPTION (PLUSAPP_BUILD_DiagnosticTools "Build the DiagnosticTools" ON)
OPTION (PLUSAPP_BUILD_fCal "Build the fCal application (Qt)" ON)
OPTION (PLUSAPP_TEST_GUI "Enable Sikuli GUI tests" ON)

# --------------------------------------------------------------------------
# Command-line application documentation
#

# Create directory for the command-line application help files (they are generated by after build by running
# each command-line tool with the --help parameter)
if(BUILD_DOCUMENTATION)
  file(MAKE_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/Doc/Help)
endif(BUILD_DOCUMENTATION)

# This macro generates a command-line application help file
MACRO(GENERATE_HELP_DOC TARGET_NAME)
  if(BUILD_DOCUMENTATION)
    ADD_CUSTOM_COMMAND(
      TARGET ${TARGET_NAME}
      POST_BUILD
      COMMAND $<TARGET_FILE:${TARGET_NAME}> --help > ${TARGET_NAME}Help.txt
      WORKING_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/Doc/Help
      )
  endif(BUILD_DOCUMENTATION)
ENDMACRO(GENERATE_HELP_DOC)

# --------------------------------------------------------------------------
# Packaging
# 
INCLUDE (${CMAKE_CURRENT_SOURCE_DIR}/CPackConfig.cmake) 

# --------------------------------------------------------------------------
# Qt
# 
# As moc files are generated in the binary dir, tell CMake
  # to always look for includes there:
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

FIND_PACKAGE(Qt4 QUIET)

IF ( NOT QT4_FOUND )
  IF(EXISTS ${QT_QMAKE_EXECUTABLE} )
    GET_FILENAME_COMPONENT(QT_BINARY_DIR ${QT_QMAKE_EXECUTABLE} DIRECTORY)
    GET_FILENAME_COMPONENT(CMAKE_PREFIX_PATH ${QT_BINARY_DIR} DIRECTORY)
  ENDIF()

  FIND_PACKAGE(Qt5Widgets QUIET)

  #get_cmake_property(_variableNames VARIABLES)
  #foreach (_variableName ${_variableNames})
    #message(STATUS "${_variableName}=${${_variableName}}")
  #endforeach()

  IF ( NOT Qt5Gui_FOUND )
    MESSAGE( FATAL_ERROR "This project requires Qt4 or Qt5 for building PlusApp. These components are missing. Please verify configuration by selecting QT_QMAKE_EXECUTABLE or turn off PLUSBUILD_BUILD_PLUSAPP option.")
  ENDIF()

  SET(QT_VERSION_MAJOR ${Qt5Widgets_VERSION_MAJOR})
ELSE()
  INCLUDE(${QT_USE_FILE})
ENDIF()

SET(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTORCC ON)

# --------------------------------------------------------------------------
# Build the CommonWidgets library (Qt)
ADD_SUBDIRECTORY(CommonWidgets)

# --------------------------------------------------------------------------
# Build various utilities
ADD_SUBDIRECTORY(PointSetExtractor)
ADD_SUBDIRECTORY(SpatialSensorFusion)

IF(PLUS_USE_OpenIGTLink)
  ADD_SUBDIRECTORY(PlusServerLauncher) #(Qt)
ENDIF(PLUS_USE_OpenIGTLink)

# --------------------------------------------------------------------------
# Build the DiagnosticTools 
IF (PLUSAPP_BUILD_DiagnosticTools)
  ADD_SUBDIRECTORY(DiagnosticTools)
  ADD_DEPENDENCIES( DiagDataCollection ${PLUSLIB_DEPENDENCIES} )
ENDIF (PLUSAPP_BUILD_DiagnosticTools)

# --------------------------------------------------------------------------
# Build the fCal application (Qt)
IF (PLUSAPP_BUILD_fCal)
  ADD_SUBDIRECTORY(fCal)
  ADD_DEPENDENCIES( fCal ${PLUSLIB_DEPENDENCIES} )
ENDIF (PLUSAPP_BUILD_fCal)

#-----------------------------------------------------------------------------
# Generate documentation
#
option(BUILD_DOCUMENTATION "Build the documentation (Doxygen)." ${PLUSLIB_BUILD_DOCUMENTATION})
mark_as_advanced(BUILD_DOCUMENTATION)

IF (BUILD_DOCUMENTATION) 
 
  IF(NOT PLUSLIB_BUILD_DOCUMENTATION)
    # Try to detect GraphViz path (CMake's Doxygen package finder only tries some obsolete paths on Windows)
    find_program(DOXYGEN_DOT_EXECUTABLE
        NAMES dot
        PATHS
          "$ENV{ProgramFiles}/Graphviz2.38/bin"
          "$ENV{ProgramFiles(x86)}/Graphviz2.38/bin"
          "$ENV{ProgramFiles}/Graphviz2.34/bin"
          "$ENV{ProgramFiles(x86)}/Graphviz2.34/bin"
        DOC "Graphviz Dot tool for using Doxygen"
        NO_SYSTEM_ENVIRONMENT_PATH
      )
  ENDIF(NOT PLUSLIB_BUILD_DOCUMENTATION)

ENDIF (BUILD_DOCUMENTATION)

ADD_SUBDIRECTORY(Documentation)

#-----------------------------------------------------------------------------
# Include PlusLib MS projects 
INCLUDE_PLUSLIB_MS_PROJECTS()

SET (PLUSAPP_INCLUDE_DIRS   
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/CommonWidgets
  ${CMAKE_CURRENT_BINARY_DIR}/CommonWidgets
  )
# --------------------------------------------------------------------------
# Create PlusApp target list 
SET( PLUSAPP_TARGETS
  CommonWidgets
  )

# Add all targets to the build-tree export set
export(TARGETS ${PLUSAPP_TARGETS}
  FILE "${CMAKE_CURRENT_BINARY_DIR}/PlusAppLibraryDepends.cmake") 
  
# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE PlusApp)

# Create a PlusAppConfig.cmake file for the use from the build tree
configure_file(PlusAppConfig.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/PlusAppConfig.cmake" @ONLY)
configure_file(PlusAppConfigVersion.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/PlusAppConfigVersion.cmake" @ONLY)
  
#-----------------------------------------------------------------------------
# Generate include file for projects that use this library 
# 
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/UsePlusApp.cmake.in 
  ${CMAKE_CURRENT_BINARY_DIR}/UsePlusApp.cmake
    @ONLY
  )

#-----------------------------------------------------------------------------
# Generate default application configuration file for the install
# 
SET( PLUSCONFIG_DEVICESET_CONFIG_DIR "../config" )
SET( PLUSCONFIG_IMAGE_DIR "../data" )
SET( PLUSCONFIG_MODEL_DIR "../config" )
SET( PLUSCONFIG_SCRIPTS_DIR "../scripts" )

configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/PlusConfig.xml.in
  ${CMAKE_CURRENT_BINARY_DIR}/PlusConfig.xml
  )  

#-----------------------------------------------------------------------------
# Generate convenience files for automatic build, test, and packaging
# 
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/CreatePackage.bat.in
  ${CMAKE_CURRENT_BINARY_DIR}/CreatePackage.bat
  )  
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/BuildAndTest.bat.in 
  ${CMAKE_CURRENT_BINARY_DIR}/BuildAndTest.bat
  )
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/BuildAndTest.sh.in 
  ${CMAKE_CURRENT_BINARY_DIR}/BuildAndTest.sh
  )
#-----------------------------------------------------------------------------
# Install files 
INCLUDE(InstallFiles.cmake)